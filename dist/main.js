/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const searchButton = document.getElementById('searchButton');\r\nconst tempButton = document.getElementById('tempButton');\r\nconst API = '569b16653b1e1b0bacaf824d6467a76c';\r\nlet tempUnit = 'celcius';\r\nasync function getGeoLocation(city) {\r\n  let request = await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=5&appid=${API}`, { mode: 'cors' });\r\n  let data = await request.json();\r\n  if (data.length == 0) {\r\n    throw new Error('Plesase enter city name');\r\n  } else {\r\n    let lat = data[0].lat;\r\n    let lon = data[0].lon;\r\n    return { lat, lon };\r\n  }\r\n}\r\n//\r\n//https://api.openweathermap.org/data/2.5/forecast?lat=${coords.lat}&lon=${coords.lon}&appid=${API}\r\nasync function getWeather(coords) {\r\n  let request = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.lat}&lon=${coords.lon}&appid=${API}`, { mode: 'cors' });\r\n  let data = await request.json();\r\n  return data;\r\n}\r\nfunction displayWeather(object) {\r\n  console.log(object);\r\n  const left = document.querySelector('.left');\r\n  const right = document.querySelector('.right');\r\n  let country = object.sys.country;\r\n  let name = object.name;\r\n  let h3 = document.createElement('h3');\r\n  let h2 = document.createElement('h2');\r\n  let mainTemp;\r\n  let weather = object.weather[0].main;\r\n  let p = document.createElement('p');\r\n  let div = document.createElement('div');\r\n  let highTemp;\r\n  let minTemp;\r\n\r\n  p.append(weather);\r\n\r\n  h3.append(name + ', ', country);\r\n\r\n  let sunriseDiv = document.createElement('div');\r\n  let sunriseTitle = document.createElement('p');\r\n  sunriseTitle.classList.add('title');\r\n  let sunriseContent = document.createElement('p');\r\n  sunriseContent.classList.add('content');\r\n  sunriseTitle.append('Sunrise');\r\n  sunriseContent.append(convertUnixTime(object.sys.sunrise));\r\n  sunriseDiv.append(sunriseTitle, sunriseContent);\r\n  let sunsetDiv = document.createElement('div');\r\n  let sunsetTitle = document.createElement('p');\r\n  sunsetTitle.classList.add('title');\r\n  let sunsetContent = document.createElement('p');\r\n  sunsetContent.classList.add('content');\r\n  sunsetTitle.append('Sunset');\r\n  sunsetContent.append(convertUnixTime(object.sys.sunset));\r\n  sunsetDiv.append(sunsetTitle, sunsetContent);\r\n  let humidityDiv = document.createElement('div');\r\n  let humidityTitle = document.createElement('p');\r\n  humidityTitle.append('Humidity');\r\n  humidityTitle.classList.add('title');\r\n  let humidityContent = document.createElement('p');\r\n  humidityContent.classList.add('content');\r\n  humidityContent.append(object.main.humidity + '%');\r\n  humidityDiv.append(humidityTitle, humidityContent);\r\n  let windDiv = document.createElement('div');\r\n  let windTitle = document.createElement('p');\r\n  windTitle.append('Wind');\r\n  windTitle.classList.add('title');\r\n  let windContent = document.createElement('p');\r\n  windContent.classList.add('content');\r\n  windContent.append(object.wind.speed + 'km/h');\r\n  windDiv.append(windTitle, windContent);\r\n  let feelsDiv = document.createElement('div');\r\n  let feelsTitle = document.createElement('p');\r\n  feelsTitle.append('Feels like');\r\n  feelsTitle.classList.add('title');\r\n  let feelsContent = document.createElement('p');\r\n  feelsContent.classList.add('content');\r\n  feelsContent.dataset.temp = '';\r\n  feelsDiv.append(feelsTitle, feelsContent);\r\n  let pressureDiv = document.createElement('div');\r\n  let pressureTitle = document.createElement('p');\r\n  pressureTitle.append('Pressure');\r\n  pressureTitle.classList.add('title');\r\n  let pressureContent = document.createElement('p');\r\n  pressureContent.classList.add('content');\r\n  pressureContent.append(object.main.pressure + ' hPa');\r\n  pressureDiv.append(pressureTitle, pressureContent);\r\n  let visibilityDiv = document.createElement('div');\r\n  let visibilityTitle = document.createElement('p');\r\n  visibilityTitle.append('visibility');\r\n  visibilityTitle.classList.add('title');\r\n  let visibilityContent = document.createElement('p');\r\n  visibilityContent.classList.add('content');\r\n  visibilityContent.append(object.visibility / 1000 + 'km');\r\n  visibilityDiv.append(visibilityTitle, visibilityContent);\r\n\r\n  if (tempUnit === 'celcius') {\r\n    mainTemp = kelvinToCelcius(object.main.temp) + '\\u{B0}';\r\n    highTemp = kelvinToCelcius(object.main.temp_max) + '\\u{B0}';\r\n    minTemp = kelvinToCelcius(object.main.temp_min) + '\\u{B0}';\r\n    feelsContent.append(kelvinToCelcius(object.main.feels_like) + '\\u{B0}');\r\n  } else {\r\n    mainTemp = kelvinToFahrenheit(object.main.temp) + '\\u{B0}';\r\n    highTemp = kelvinToFahrenheit(object.main.temp_max) + '\\u{B0}';\r\n    minTemp = kelvinToFahrenheit(object.main.temp_min) + '\\u{B0}';\r\n    feelsContent.append(kelvinToFahrenheit(object.main.feels_like) + '\\u{B0}');\r\n  }\r\n  let highTempSpan = document.createElement('span');\r\n  let minTempSpan = document.createElement('span');\r\n  highTempSpan.append('H: ' + highTemp);\r\n  minTempSpan.append(' L:' + minTemp);\r\n  h2.dataset.temp = '';\r\n  highTempSpan.dataset.temp = '';\r\n  minTempSpan.dataset.temp = '';\r\n  h2.append(mainTemp);\r\n  div.append(highTempSpan, minTempSpan);\r\n  left.append(h3, p, h2, div);\r\n\r\n  right.append(sunriseDiv, sunsetDiv, humidityDiv, windDiv, feelsDiv, pressureDiv, visibilityDiv);\r\n}\r\nfunction convertUnixTime(time) {\r\n  let time2 = parseFloat(time);\r\n  let date = new Date(time2 * 1000);\r\n  let hours = date.getHours();\r\n  let minutes = date.getMinutes();\r\n  let formattedTime = hours + ':' + minutes;\r\n  return formattedTime;\r\n}\r\nfunction kelvinToCelcius(temp) {\r\n  let temp2 = parseFloat(temp);\r\n  return Math.round(temp2 - 273.15);\r\n}\r\nfunction kelvinToFahrenheit(temp) {\r\n  let temp2 = parseFloat(temp);\r\n  return Math.round((temp2 - 273.15) * 1.8 + 32);\r\n}\r\nfunction celciusToFahrenheit(temp) {\r\n  let temp2 = parseFloat(temp);\r\n  return Math.round(temp2 * 1.8 + 32);\r\n}\r\nfunction fahrenheitToCelcius(temp) {\r\n  let temp2 = parseFloat(temp);\r\n  return Math.round((temp2 - 32) / 1.8);\r\n}\r\nsearchButton.addEventListener('click', () => {\r\n  let left = document.querySelector('.left');\r\n  let right = document.querySelector('.right');\r\n  left.textContent = '';\r\n  right.textContent = '';\r\n  let city = document.getElementById('search').value;\r\n  if (city === '') return;\r\n  getGeoLocation(city)\r\n    .then(coords => getWeather(coords))\r\n    .then(weather => displayWeather(weather))\r\n    .catch(err => console.log(err));\r\n});\r\ntempButton.addEventListener('click', e => {\r\n  let temps = [...document.querySelectorAll('[data-temp]')];\r\n  if (tempUnit === 'celcius') {\r\n    tempUnit = 'fahrenheit';\r\n    let button = e.target.closest('button');\r\n    button.children[0].classList.remove('active');\r\n    button.children[1].classList.add('active');\r\n    temps.forEach(element => {\r\n      let oldArray = [];\r\n      let jjdks = element.firstChild.textContent.split('');\r\n      jjdks.forEach(s => {\r\n        let n = parseInt(s);\r\n        if (typeof n == 'number') oldArray.push(n);\r\n      });\r\n      let newArray = oldArray.filter(v => {\r\n        return !Number.isNaN(v);\r\n      });\r\n      let newTemp = celciusToFahrenheit(newArray.join(''));\r\n      element.textContent = newTemp + '\\u{B0}';\r\n    });\r\n  } else {\r\n    tempUnit = 'celcius';\r\n    let button = e.target.closest('button');\r\n    button.children[0].classList.add('active');\r\n    button.children[1].classList.remove('active');\r\n    temps.forEach(element => {\r\n      let oldArray = [];\r\n      let jjdks = element.firstChild.textContent.split('');\r\n      jjdks.forEach(s => {\r\n        let n = parseInt(s);\r\n        if (typeof n == 'number') oldArray.push(n);\r\n      });\r\n      let newArray = oldArray.filter(v => {\r\n        return !Number.isNaN(v);\r\n      });\r\n      let newTemp = fahrenheitToCelcius(newArray.join(''));\r\n      element.textContent = newTemp + '\\u{B0}';\r\n    });\r\n  }\r\n});\r\n\n\n//# sourceURL=webpack://weather-app/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;